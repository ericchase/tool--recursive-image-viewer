// src/lib/ericchase/Algorithm/Array/Array.ts
function ArrayEquals(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}

// src/lib/ericchase/Algorithm/Array/Uint8Array.ts
function U8(from = []) {
  return Uint8Array.from(from);
}

// src/lib/ericchase/Utility/RecursiveAsyncIterator.ts
class RecursiveAsyncIterator {
  fn;
  constructor(fn) {
    this.fn = fn;
  }
  async *iterate(init) {
    const list = [init];
    for (let i = 0; i < list.length; i++) {
      for await (const fSEntry of this.fn(list[i], (value) => {
        list.push(value);
      })) {
        yield fSEntry;
      }
    }
  }
}

// src/lib/ericchase/Web API/DataTransfer.ts
class DataTransferItemIterator {
  list = [];
  constructor(items) {
    if (items instanceof DataTransferItem) {
      this.list = [items];
    } else if (items instanceof DataTransferItemList) {
      this.list = Array.from(items);
    } else if (Array.isArray(items)) {
      this.list = items;
    }
  }
  *getAsEntry() {
    for (const item of this.list) {
      const entry = item.getAsEntry?.() ?? item.webkitGetAsEntry?.();
      if (entry instanceof FileSystemEntry) {
        yield entry;
      }
    }
  }
  *getAsFile() {
    for (const item of this.list) {
      const file = item.getAsFile?.();
      if (file instanceof File) {
        yield file;
      }
    }
  }
  async *getAsString() {
    for (const item of this.list) {
      yield await new Promise((resolve, reject) => {
        if (typeof item.getAsString === 'function') {
          item.getAsString(resolve);
        } else {
          reject();
        }
      });
    }
  }
}

// src/lib/ericchase/Web API/FileSystem.ts
class FileSystemEntryIterator {
  list = [];
  constructor(entries) {
    if (entries instanceof FileSystemEntry) {
      this.list = [entries];
    } else if (Array.isArray(entries)) {
      this.list = entries;
    }
  }
  *getDirectoryEntry() {
    for (const entry of this.list) {
      if (entry.isDirectory && entry instanceof FileSystemDirectoryEntry) {
        yield entry;
      }
    }
  }
  *getFileEntry() {
    for (const entry of this.list) {
      if (entry.isFile && entry instanceof FileSystemFileEntry) {
        yield entry;
      }
    }
  }
}

class FileSystemDirectoryEntryIterator {
  list = [];
  constructor(entries) {
    if (entries instanceof FileSystemDirectoryEntry) {
      this.list = [entries];
    } else if (Array.isArray(entries)) {
      this.list = entries;
    }
  }
  async *getEntry() {
    for (const entry of this.list) {
      const reader = entry.createReader();
      for (const entry2 of await new Promise((resolve, reject) => reader.readEntries(resolve, reject))) {
        yield entry2;
      }
    }
  }
}

// src/lib/drag-and-drop-file-picker.ts
function setupDragAndDropFilePicker(element, fn) {
  const bits_check = U8([0, 0, 0, 0]);
  if (webkitdirectory_support) {
    element.toggleAttribute('webkitdirectory', true);
  }
  element.addEventListener('change', changeHandler);
  element.addEventListener('drop', dropHandler);
  const fSEntrySet = new Set();
  const fSEntryIterator = new RecursiveAsyncIterator(async function* (fSEntryIterator2, push) {
    for await (const fSEntry of fSEntryIterator2) {
      if (!fSEntrySet.has(fSEntry.fullPath.slice(1))) {
        fSEntrySet.add(fSEntry.fullPath.slice(1));
        const fsEntries = new FileSystemEntryIterator(fSEntry);
        for (const fSFileEntry of fsEntries.getFileEntry()) {
          yield fSFileEntry;
        }
        for (const fSDirectoryEntry of fsEntries.getDirectoryEntry()) {
          push(new FileSystemDirectoryEntryIterator(fSDirectoryEntry).getEntry());
        }
      }
    }
  });
  function end() {
    if (ArrayEquals(bits_on, bits_check)) {
      fSEntrySet.clear();
      bits_check[0] = 0;
      bits_check[1] = 0;
      bits_check[2] = 0;
      bits_check[3] = 0;
      fn.onEnd();
    }
  }
  async function changeHandler(event) {
    if (ArrayEquals(bits_off, bits_check)) {
      fn.onStart();
    }
    bits_check[0] = 1;
    if (event.target instanceof HTMLInputElement && event.target.files) {
      for await (const fSFileEntry of fSEntryIterator.iterate(event.target.webkitEntries)) {
        fSFileEntry.file(fn.onFile);
      }
      for (const file of event.target.files) {
        if (!fSEntrySet.has(file.webkitRelativePath)) {
          fSEntrySet.add(file.webkitRelativePath);
          fn.onFile(file);
        }
      }
    }
    bits_check[2] = 1;
    end();
  }
  async function dropHandler(event) {
    if (ArrayEquals(bits_off, bits_check)) {
      fn.onStart();
    }
    bits_check[1] = 1;
    if (event.dataTransfer) {
      const dataTransferItems = new DataTransferItemIterator(event.dataTransfer.items);
      for await (const fSFileEntry of fSEntryIterator.iterate(dataTransferItems.getAsEntry())) {
        fSFileEntry.file(fn.onFile);
      }
      for (const file of event.dataTransfer.files) {
        if (!fSEntrySet.has(file.webkitRelativePath)) {
          fSEntrySet.add(file.webkitRelativePath);
          fn.onFile(file);
        }
      }
    }
    bits_check[3] = 1;
    end();
  }
}
var webkitdirectory_support = /android|iphone|mobile/i.test(window.navigator.userAgent) === true ? false : true;
var bits_off = U8([0, 0, 0, 0]);
var bits_on = U8([1, 1, 1, 1]);

// src/index.ts
function showImage(file) {
  const div = document.createElement('div');
  const img = document.createElement('img');
  img.onerror = function () {
    div.remove();
  };
  img.src = URL.createObjectURL(file);
  div.append(img);
  main?.append(div);
}
document.documentElement.addEventListener('dragover', (event) => event.preventDefault());
var main = document.querySelector('main');
var picker = document.querySelector('.drag-and-drop-file-picker');
var input = picker?.querySelector('input');
if (input) {
  setupDragAndDropFilePicker(input, {
    onStart() {
      main?.replaceChildren();
      picker?.classList.add('hidden');
    },
    onFile: showImage,
    onEnd() {
      picker?.remove();
    },
  });
}

//# debugId=5C7BC9ED5E8BB3A864756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjXFxsaWJcXGVyaWNjaGFzZVxcQWxnb3JpdGhtXFxBcnJheVxcQXJyYXkudHMiLCAic3JjXFxsaWJcXGVyaWNjaGFzZVxcQWxnb3JpdGhtXFxBcnJheVxcVWludDhBcnJheS50cyIsICJzcmNcXGxpYlxcZXJpY2NoYXNlXFxVdGlsaXR5XFxSZWN1cnNpdmVBc3luY0l0ZXJhdG9yLnRzIiwgInNyY1xcbGliXFxlcmljY2hhc2VcXFdlYiBBUElcXERhdGFUcmFuc2Zlci50cyIsICJzcmNcXGxpYlxcZXJpY2NoYXNlXFxXZWIgQVBJXFxGaWxlU3lzdGVtLnRzIiwgInNyY1xcbGliXFxkcmFnLWFuZC1kcm9wLWZpbGUtcGlja2VyLnRzIiwgInNyY1xcaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiZXhwb3J0IGZ1bmN0aW9uIEFycmF5RXF1YWxzKGE6IEFycmF5TGlrZTxhbnk+LCBiOiBBcnJheUxpa2U8YW55Pik6IGJvb2xlYW4ge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24qIEFycmF5R2V0Qnl0ZXMoYnVmZmVyOiBBcnJheUJ1ZmZlckxpa2UpOiBHZW5lcmF0b3I8bnVtYmVyPiB7XG4gIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aWV3LmJ5dGVMZW5ndGg7IGkrKykge1xuICAgIHlpZWxkIHZpZXcuZ2V0VWludDgoaSkgPj4+IDA7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEFycmF5U3BsaXQ8VD4oaXRlbXM6IFRbXSwgY291bnQ6IG51bWJlcik6IFRbXVtdIHtcbiAgaWYgKGNvdW50ID4gaXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtpdGVtcy5zbGljZSgpXTtcbiAgfVxuICBpZiAoY291bnQgPiAwKSB7XG4gICAgY29uc3QgcGFydHM6IFRbXVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gY291bnQpIHtcbiAgICAgIHBhcnRzLnB1c2goaXRlbXMuc2xpY2UoaSwgaSArIGNvdW50KSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxuICByZXR1cm4gW2l0ZW1zLnNsaWNlKCldO1xufVxuIiwKICAgICJleHBvcnQgZnVuY3Rpb24gVTgoZnJvbTogQXJyYXlMaWtlPG51bWJlcj4gPSBbXSk6IFVpbnQ4QXJyYXkge1xuICByZXR1cm4gVWludDhBcnJheS5mcm9tKGZyb20pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThDbGFtcGVkKGZyb206IEFycmF5TGlrZTxudW1iZXI+ID0gW10pOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShVaW50OENsYW1wZWRBcnJheS5mcm9tKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFU4Q29uY2F0KGFycmF5czogcmVhZG9ubHkgVWludDhBcnJheVtdKTogVWludDhBcnJheSB7XG4gIGxldCB0b3RhbExlbmd0aCA9IDA7XG4gIGZvciAoY29uc3QgYXJyYXkgb2YgYXJyYXlzKSB7XG4gICAgdG90YWxMZW5ndGggKz0gYXJyYXkubGVuZ3RoO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgYXJyYXkgb2YgYXJyYXlzKSB7XG4gICAgcmVzdWx0LnNldChhcnJheSwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYXJyYXkubGVuZ3RoO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVOENvcHkoYnl0ZXM6IFVpbnQ4QXJyYXksIGNvdW50OiBudW1iZXIsIG9mZnNldCA9IDApOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuIGJ5dGVzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgY291bnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThGcm9tU3RyaW5nKGZyb206IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGZyb20pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThGcm9tVWludDMyKGZyb206IG51bWJlcik6IFVpbnQ4QXJyYXkge1xuICBjb25zdCB1OHMgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyh1OHMuYnVmZmVyKTtcbiAgdmlldy5zZXRVaW50MzIoMCwgZnJvbSA+Pj4gMCwgZmFsc2UpO1xuICByZXR1cm4gdThzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThTcGxpdChieXRlczogVWludDhBcnJheSwgY291bnQ6IG51bWJlcik6IFVpbnQ4QXJyYXlbXSB7XG4gIGlmIChjb3VudCA+IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gW2J5dGVzLnNsaWNlKCldO1xuICB9XG4gIGlmIChjb3VudCA+IDApIHtcbiAgICBjb25zdCBwYXJ0czogVWludDhBcnJheVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gY291bnQpIHtcbiAgICAgIHBhcnRzLnB1c2goYnl0ZXMuc2xpY2UoaSwgaSArIGNvdW50KSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbiAgfVxuICByZXR1cm4gW2J5dGVzLnNsaWNlKCldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThUYWtlKGJ5dGVzOiBVaW50OEFycmF5LCBjb3VudDogbnVtYmVyKTogW1VpbnQ4QXJyYXksIFVpbnQ4QXJyYXldIHtcbiAgaWYgKGNvdW50ID4gYnl0ZXMuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBbYnl0ZXMuc2xpY2UoKSwgbmV3IFVpbnQ4QXJyYXkoKV07XG4gIH1cbiAgaWYgKGNvdW50ID4gMCkge1xuICAgIGNvbnN0IGNodW5rQSA9IGJ5dGVzLnNsaWNlKDAsIGNvdW50KTtcbiAgICBjb25zdCBjaHVua0IgPSBieXRlcy5zbGljZShjb3VudCk7XG4gICAgcmV0dXJuIFtjaHVua0EsIGNodW5rQl07XG4gIH1cbiAgcmV0dXJuIFtuZXcgVWludDhBcnJheSgpLCBieXRlcy5zbGljZSgpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFU4VGFrZUVuZChieXRlczogVWludDhBcnJheSwgY291bnQ6IG51bWJlcik6IFtVaW50OEFycmF5LCBVaW50OEFycmF5XSB7XG4gIGlmIChjb3VudCA+IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gW2J5dGVzLnNsaWNlKCksIG5ldyBVaW50OEFycmF5KCldO1xuICB9XG4gIGlmIChjb3VudCA+IDApIHtcbiAgICBjb25zdCBjaHVua0EgPSBieXRlcy5zbGljZShieXRlcy5ieXRlTGVuZ3RoIC0gY291bnQpO1xuICAgIGNvbnN0IGNodW5rQiA9IGJ5dGVzLnNsaWNlKDAsIGJ5dGVzLmJ5dGVMZW5ndGggLSBjb3VudCk7XG4gICAgcmV0dXJuIFtjaHVua0EsIGNodW5rQl07XG4gIH1cbiAgcmV0dXJuIFtuZXcgVWludDhBcnJheSgpLCBieXRlcy5zbGljZSgpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFU4VG9BU0NJSShieXRlczogVWludDhBcnJheSk6IHN0cmluZyB7XG4gIHJldHVybiBBcnJheS5mcm9tKGJ5dGVzKVxuICAgIC5tYXAoKGJ5dGUpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSA+Pj4gMCkpXG4gICAgLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThUb0RlY2ltYWwoYnl0ZXM6IFVpbnQ4QXJyYXkpOiBzdHJpbmdbXSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGJ5dGVzKS5tYXAoKGJ5dGUpID0+IChieXRlID4+PiAwKS50b1N0cmluZygxMCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVThUb0hleChieXRlczogVWludDhBcnJheSk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oYnl0ZXMpLm1hcCgoYnl0ZSkgPT4gKGJ5dGUgPj4+IDApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKTtcbn1cbiIsCiAgICAiZXhwb3J0IGNsYXNzIFJlY3Vyc2l2ZUFzeW5jSXRlcmF0b3I8SW4sIE91dD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm46ICh2YWx1ZTogSXRlcmFibGU8SW4+IHwgQXN5bmNJdGVyYWJsZTxJbj4sIHB1c2g6ICh2YWx1ZTogSXRlcmFibGU8SW4+IHwgQXN5bmNJdGVyYWJsZTxJbj4pID0+IHZvaWQpID0+IEl0ZXJhYmxlPE91dD4gfCBBc3luY0l0ZXJhYmxlPE91dD4pIHt9XG4gIGFzeW5jICppdGVyYXRlKGluaXQ6IEl0ZXJhYmxlPEluPiB8IEFzeW5jSXRlcmFibGU8SW4+KTogSXRlcmFibGU8T3V0PiB8IEFzeW5jSXRlcmFibGU8T3V0PiB7XG4gICAgY29uc3QgbGlzdDogKEl0ZXJhYmxlPEluPiB8IEFzeW5jSXRlcmFibGU8SW4+KVtdID0gW2luaXRdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIGF3YWl0IChjb25zdCBmU0VudHJ5IG9mIHRoaXMuZm4obGlzdFtpXSwgKHZhbHVlKSA9PiB7XG4gICAgICAgIGxpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9KSkge1xuICAgICAgICB5aWVsZCBmU0VudHJ5O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwKICAgICJleHBvcnQgY2xhc3MgRGF0YVRyYW5zZmVySXRlbUl0ZXJhdG9yIHtcbiAgbGlzdDogRGF0YVRyYW5zZmVySXRlbVtdID0gW107XG4gIGNvbnN0cnVjdG9yKGl0ZW1zPzogRGF0YVRyYW5zZmVySXRlbSB8IERhdGFUcmFuc2Zlckl0ZW1bXSB8IERhdGFUcmFuc2Zlckl0ZW1MaXN0IHwgbnVsbCkge1xuICAgIGlmIChpdGVtcyBpbnN0YW5jZW9mIERhdGFUcmFuc2Zlckl0ZW0pIHtcbiAgICAgIHRoaXMubGlzdCA9IFtpdGVtc107XG4gICAgfSBlbHNlIGlmIChpdGVtcyBpbnN0YW5jZW9mIERhdGFUcmFuc2Zlckl0ZW1MaXN0KSB7XG4gICAgICB0aGlzLmxpc3QgPSBBcnJheS5mcm9tKGl0ZW1zKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICB0aGlzLmxpc3QgPSBpdGVtcztcbiAgICB9XG4gIH1cbiAgKmdldEFzRW50cnkoKTogR2VuZXJhdG9yPEZpbGVTeXN0ZW1FbnRyeT4ge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmxpc3QpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gKGl0ZW0gYXMgRGF0YVRyYW5zZmVySXRlbSAmIHsgZ2V0QXNFbnRyeT86IERhdGFUcmFuc2Zlckl0ZW1bJ3dlYmtpdEdldEFzRW50cnknXSB9KS5nZXRBc0VudHJ5Py4oKSA/PyBpdGVtLndlYmtpdEdldEFzRW50cnk/LigpO1xuICAgICAgaWYgKGVudHJ5IGluc3RhbmNlb2YgRmlsZVN5c3RlbUVudHJ5KSB7XG4gICAgICAgIHlpZWxkIGVudHJ5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAqZ2V0QXNGaWxlKCk6IEdlbmVyYXRvcjxGaWxlPiB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMubGlzdCkge1xuICAgICAgY29uc3QgZmlsZSA9IGl0ZW0uZ2V0QXNGaWxlPy4oKTtcbiAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgRmlsZSkge1xuICAgICAgICB5aWVsZCBmaWxlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyAqZ2V0QXNTdHJpbmcoKTogQXN5bmNHZW5lcmF0b3I8c3RyaW5nPiB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMubGlzdCkge1xuICAgICAgeWllbGQgYXdhaXQgbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbS5nZXRBc1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGl0ZW0uZ2V0QXNTdHJpbmcocmVzb2x2ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwKICAgICJleHBvcnQgY2xhc3MgRmlsZVN5c3RlbUVudHJ5SXRlcmF0b3Ige1xuICBsaXN0OiBGaWxlU3lzdGVtRW50cnlbXSA9IFtdO1xuICBjb25zdHJ1Y3RvcihlbnRyaWVzPzogRmlsZVN5c3RlbUVudHJ5IHwgRmlsZVN5c3RlbUVudHJ5W10gfCBudWxsKSB7XG4gICAgaWYgKGVudHJpZXMgaW5zdGFuY2VvZiBGaWxlU3lzdGVtRW50cnkpIHtcbiAgICAgIHRoaXMubGlzdCA9IFtlbnRyaWVzXTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW50cmllcykpIHtcbiAgICAgIHRoaXMubGlzdCA9IGVudHJpZXM7XG4gICAgfVxuICB9XG4gICpnZXREaXJlY3RvcnlFbnRyeSgpOiBHZW5lcmF0b3I8RmlsZVN5c3RlbURpcmVjdG9yeUVudHJ5PiB7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLmxpc3QpIHtcbiAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSAmJiBlbnRyeSBpbnN0YW5jZW9mIEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeSkge1xuICAgICAgICB5aWVsZCBlbnRyeTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgKmdldEZpbGVFbnRyeSgpOiBHZW5lcmF0b3I8RmlsZVN5c3RlbUZpbGVFbnRyeT4ge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5saXN0KSB7XG4gICAgICBpZiAoZW50cnkuaXNGaWxlICYmIGVudHJ5IGluc3RhbmNlb2YgRmlsZVN5c3RlbUZpbGVFbnRyeSkge1xuICAgICAgICB5aWVsZCBlbnRyeTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeUl0ZXJhdG9yIHtcbiAgbGlzdDogRmlsZVN5c3RlbURpcmVjdG9yeUVudHJ5W10gPSBbXTtcbiAgY29uc3RydWN0b3IoZW50cmllcz86IEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeSB8IEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeVtdIHwgbnVsbCkge1xuICAgIGlmIChlbnRyaWVzIGluc3RhbmNlb2YgRmlsZVN5c3RlbURpcmVjdG9yeUVudHJ5KSB7XG4gICAgICB0aGlzLmxpc3QgPSBbZW50cmllc107XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVudHJpZXMpKSB7XG4gICAgICB0aGlzLmxpc3QgPSBlbnRyaWVzO1xuICAgIH1cbiAgfVxuICBhc3luYyAqZ2V0RW50cnkoKTogQXN5bmNHZW5lcmF0b3I8RmlsZVN5c3RlbUVudHJ5PiB7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLmxpc3QpIHtcbiAgICAgIGNvbnN0IHJlYWRlciA9IGVudHJ5LmNyZWF0ZVJlYWRlcigpO1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBhd2FpdCBuZXcgUHJvbWlzZTxGaWxlU3lzdGVtRW50cnlbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4gcmVhZGVyLnJlYWRFbnRyaWVzKHJlc29sdmUsIHJlamVjdCkpKSB7XG4gICAgICAgIHlpZWxkIGVudHJ5O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwKICAgICJpbXBvcnQgeyBBcnJheUVxdWFscyB9IGZyb20gJy4vZXJpY2NoYXNlL0FsZ29yaXRobS9BcnJheS9BcnJheS5qcyc7XG5pbXBvcnQgeyBVOCB9IGZyb20gJy4vZXJpY2NoYXNlL0FsZ29yaXRobS9BcnJheS9VaW50OEFycmF5LmpzJztcbmltcG9ydCB7IFJlY3Vyc2l2ZUFzeW5jSXRlcmF0b3IgfSBmcm9tICcuL2VyaWNjaGFzZS9VdGlsaXR5L1JlY3Vyc2l2ZUFzeW5jSXRlcmF0b3IuanMnO1xuaW1wb3J0IHsgRGF0YVRyYW5zZmVySXRlbUl0ZXJhdG9yIH0gZnJvbSAnLi9lcmljY2hhc2UvV2ViIEFQSS9EYXRhVHJhbnNmZXIuanMnO1xuaW1wb3J0IHsgRmlsZVN5c3RlbURpcmVjdG9yeUVudHJ5SXRlcmF0b3IsIEZpbGVTeXN0ZW1FbnRyeUl0ZXJhdG9yIH0gZnJvbSAnLi9lcmljY2hhc2UvV2ViIEFQSS9GaWxlU3lzdGVtLmpzJztcblxuY29uc3Qgd2Via2l0ZGlyZWN0b3J5X3N1cHBvcnQgPSAvYW5kcm9pZHxpcGhvbmV8bW9iaWxlL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgPT09IHRydWUgPyBmYWxzZSA6IHRydWU7XG5cbmNvbnN0IGJpdHNfb2ZmID0gVTgoWzAsIDAsIDAsIDBdKTtcbmNvbnN0IGJpdHNfb24gPSBVOChbMSwgMSwgMSwgMV0pO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBEcmFnQW5kRHJvcEZpbGVQaWNrZXIoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgZm46IHsgb25TdGFydDogKCkgPT4gdm9pZDsgb25GaWxlOiAoZmlsZTogRmlsZSkgPT4gdm9pZDsgb25FbmQ6ICgpID0+IHZvaWQgfSkge1xuICBjb25zdCBiaXRzX2NoZWNrID0gVTgoWzAsIDAsIDAsIDBdKTtcbiAgaWYgKHdlYmtpdGRpcmVjdG9yeV9zdXBwb3J0KSB7XG4gICAgZWxlbWVudC50b2dnbGVBdHRyaWJ1dGUoJ3dlYmtpdGRpcmVjdG9yeScsIHRydWUpO1xuICB9XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGRyb3BIYW5kbGVyKTtcbiAgY29uc3QgZlNFbnRyeVNldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBjb25zdCBmU0VudHJ5SXRlcmF0b3IgPSBuZXcgUmVjdXJzaXZlQXN5bmNJdGVyYXRvcjxGaWxlU3lzdGVtRW50cnksIEZpbGVTeXN0ZW1GaWxlRW50cnk+KGFzeW5jIGZ1bmN0aW9uKiAoZlNFbnRyeUl0ZXJhdG9yLCBwdXNoKSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCBmU0VudHJ5IG9mIGZTRW50cnlJdGVyYXRvcikge1xuICAgICAgaWYgKCFmU0VudHJ5U2V0LmhhcyhmU0VudHJ5LmZ1bGxQYXRoLnNsaWNlKDEpKSkge1xuICAgICAgICBmU0VudHJ5U2V0LmFkZChmU0VudHJ5LmZ1bGxQYXRoLnNsaWNlKDEpKTtcbiAgICAgICAgY29uc3QgZnNFbnRyaWVzID0gbmV3IEZpbGVTeXN0ZW1FbnRyeUl0ZXJhdG9yKGZTRW50cnkpO1xuICAgICAgICBmb3IgKGNvbnN0IGZTRmlsZUVudHJ5IG9mIGZzRW50cmllcy5nZXRGaWxlRW50cnkoKSkge1xuICAgICAgICAgIHlpZWxkIGZTRmlsZUVudHJ5O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZlNEaXJlY3RvcnlFbnRyeSBvZiBmc0VudHJpZXMuZ2V0RGlyZWN0b3J5RW50cnkoKSkge1xuICAgICAgICAgIHB1c2gobmV3IEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeUl0ZXJhdG9yKGZTRGlyZWN0b3J5RW50cnkpLmdldEVudHJ5KCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gZW5kKCkge1xuICAgIGlmIChBcnJheUVxdWFscyhiaXRzX29uLCBiaXRzX2NoZWNrKSkge1xuICAgICAgZlNFbnRyeVNldC5jbGVhcigpO1xuICAgICAgYml0c19jaGVja1swXSA9IDA7XG4gICAgICBiaXRzX2NoZWNrWzFdID0gMDtcbiAgICAgIGJpdHNfY2hlY2tbMl0gPSAwO1xuICAgICAgYml0c19jaGVja1szXSA9IDA7XG4gICAgICBmbi5vbkVuZCgpO1xuICAgIH1cbiAgfVxuICBhc3luYyBmdW5jdGlvbiBjaGFuZ2VIYW5kbGVyKGV2ZW50OiBFdmVudCkge1xuICAgIGlmIChBcnJheUVxdWFscyhiaXRzX29mZiwgYml0c19jaGVjaykpIHtcbiAgICAgIGZuLm9uU3RhcnQoKTtcbiAgICB9XG4gICAgYml0c19jaGVja1swXSA9IDE7XG4gICAgaWYgKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgZXZlbnQudGFyZ2V0LmZpbGVzKSB7XG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IGZTRmlsZUVudHJ5IG9mIGZTRW50cnlJdGVyYXRvci5pdGVyYXRlKGV2ZW50LnRhcmdldC53ZWJraXRFbnRyaWVzKSkge1xuICAgICAgICBmU0ZpbGVFbnRyeS5maWxlKGZuLm9uRmlsZSk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZXZlbnQudGFyZ2V0LmZpbGVzKSB7XG4gICAgICAgIGlmICghZlNFbnRyeVNldC5oYXMoZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgpKSB7XG4gICAgICAgICAgZlNFbnRyeVNldC5hZGQoZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgpO1xuICAgICAgICAgIGZuLm9uRmlsZShmaWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBiaXRzX2NoZWNrWzJdID0gMTtcbiAgICBlbmQoKTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBkcm9wSGFuZGxlcihldmVudDogRHJhZ0V2ZW50KSB7XG4gICAgaWYgKEFycmF5RXF1YWxzKGJpdHNfb2ZmLCBiaXRzX2NoZWNrKSkge1xuICAgICAgZm4ub25TdGFydCgpO1xuICAgIH1cbiAgICBiaXRzX2NoZWNrWzFdID0gMTtcbiAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyKSB7XG4gICAgICBjb25zdCBkYXRhVHJhbnNmZXJJdGVtcyA9IG5ldyBEYXRhVHJhbnNmZXJJdGVtSXRlcmF0b3IoZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zKTtcbiAgICAgIGZvciBhd2FpdCAoY29uc3QgZlNGaWxlRW50cnkgb2YgZlNFbnRyeUl0ZXJhdG9yLml0ZXJhdGUoZGF0YVRyYW5zZmVySXRlbXMuZ2V0QXNFbnRyeSgpKSkge1xuICAgICAgICBmU0ZpbGVFbnRyeS5maWxlKGZuLm9uRmlsZSk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzKSB7XG4gICAgICAgIGlmICghZlNFbnRyeVNldC5oYXMoZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgpKSB7XG4gICAgICAgICAgZlNFbnRyeVNldC5hZGQoZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgpO1xuICAgICAgICAgIGZuLm9uRmlsZShmaWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBiaXRzX2NoZWNrWzNdID0gMTtcbiAgICBlbmQoKTtcbiAgfVxufVxuIiwKICAgICJpbXBvcnQgeyBzZXR1cERyYWdBbmREcm9wRmlsZVBpY2tlciB9IGZyb20gJy4vbGliL2RyYWctYW5kLWRyb3AtZmlsZS1waWNrZXIuanMnO1xuXG4vLyAhIG9uZSBkYXkgdXNlIEV2ZW50TWFuYWdlclxuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2ZW50KSA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpKTtcblxuY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKTtcbmNvbnN0IHBpY2tlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kcmFnLWFuZC1kcm9wLWZpbGUtcGlja2VyJyk7XG5jb25zdCBpbnB1dCA9IHBpY2tlcj8ucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcblxuaWYgKGlucHV0KSB7XG4gIHNldHVwRHJhZ0FuZERyb3BGaWxlUGlja2VyKGlucHV0LCB7XG4gICAgb25TdGFydCgpIHtcbiAgICAgIG1haW4/LnJlcGxhY2VDaGlsZHJlbigpO1xuICAgICAgcGlja2VyPy5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9LFxuICAgIG9uRmlsZTogc2hvd0ltYWdlLFxuICAgIG9uRW5kKCkge1xuICAgICAgcGlja2VyPy5yZW1vdmUoKTtcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd0ltYWdlKGZpbGU6IEZpbGUpIHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBpbWcub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXYucmVtb3ZlKCk7XG4gIH07XG4gIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICBkaXYuYXBwZW5kKGltZyk7XG4gIG1haW4/LmFwcGVuZChkaXYpO1xufVxuIgogIF0sCiAgIm1hcHBpbmdzIjogIjtBQUFPLFNBQVMsV0FBVyxDQUFDLEdBQW1CLEdBQTRCO0FBQ3pFLE1BQUksRUFBRSxXQUFXLEVBQUUsUUFBUTtBQUN6QixXQUFPO0FBQUEsRUFDVDtBQUNBLFdBQVMsSUFBSSxFQUFHLElBQUksRUFBRSxRQUFRLEtBQUs7QUFDakMsUUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJO0FBQ2pCLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUNBLFNBQU87QUFBQTs7O0FDVEYsU0FBUyxFQUFFLENBQUMsT0FBMEIsQ0FBQyxHQUFlO0FBQzNELFNBQU8sV0FBVyxLQUFLLElBQUk7QUFBQTs7O0FDRHRCLE1BQU0sdUJBQWdDO0FBQUEsRUFDckI7QUFBQSxFQUF0QixXQUFXLENBQVcsSUFBOEk7QUFBOUk7QUFBQTtBQUFBLFNBQ2YsT0FBTyxDQUFDLE1BQTRFO0FBQ3pGLFVBQU0sT0FBNkMsQ0FBQyxJQUFJO0FBQ3hELGFBQVMsSUFBSSxFQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDcEMsdUJBQWlCLFdBQVcsS0FBSyxHQUFHLEtBQUssSUFBSSxDQUFDLFVBQVU7QUFDdEQsYUFBSyxLQUFLLEtBQUs7QUFBQSxPQUNoQixHQUFHO0FBQ0YsY0FBTTtBQUFBLE1BQ1I7QUFBQSxJQUNGO0FBQUE7QUFFSjs7O0FDWk8sTUFBTSx5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LFFBQUk7QUFBQTtBQUVOLGlCQUFlLFdBQVcsQ0FBQyxPQUFrQjtBQUMzQyxRQUFJLFlBQVksVUFBVSxVQUFVLEdBQUc7QUFDckMsU0FBRyxRQUFRO0FBQUEsSUFDYjtBQUNBLGVBQVcsS0FBSztBQUNoQixRQUFJLE1BQU0sY0FBYztBQUN0QixZQUFNLG9CQUFvQixJQUFJLHlCQUF5QixNQUFNLGFBQWEsS0FBSztBQUMvRSx1QkFBaUIsZUFBZSxnQkFBZ0IsUUFBUSxrQkFBa0IsV0FBVyxDQUFDLEdBQUc7QUFDdkYsb0JBQVksS0FBSyxHQUFHLE1BQU07QUFBQSxNQUM1QjtBQUNBLGlCQUFXLFFBQVEsTUFBTSxhQUFhLE9BQU87QUFDM0MsYUFBSyxXQUFXLElBQUksS0FBSyxrQkFBa0IsR0FBRztBQUM1QyxxQkFBVyxJQUFJLEtBQUssa0JBQWtCO0FBQ3RDLGFBQUcsT0FBTyxJQUFJO0FBQUEsUUFDaEI7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUNBLGVBQVcsS0FBSztBQUNoQixRQUFJO0FBQUE7QUFBQTtBQTFFUixJQUFNLDBCQUEwQix5QkFBeUIsS0FBSyxPQUFPLFVBQVUsU0FBUyxNQUFNLE9BQU8sUUFBUTtBQUU3RyxJQUFNLFdBQVcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNoQyxJQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQzs7O0FDYS9CLFNBQVMsU0FBUyxDQUFDLE1BQVk7QUFDN0IsUUFBTSxNQUFNLFNBQVMsY0FBYyxLQUFLO0FBQ3hDLFFBQU0sTUFBTSxTQUFTLGNBQWMsS0FBSztBQUN4QyxNQUFJLGtCQUFtQixHQUFHO0FBQ3hCLFFBQUksT0FBTztBQUFBO0FBRWIsTUFBSSxNQUFNLElBQUksZ0JBQWdCLElBQUk7QUFDbEMsTUFBSSxPQUFPLEdBQUc7QUFDZCxRQUFNLE9BQU8sR0FBRztBQUFBO0FBM0JsQixTQUFTLGdCQUFnQixpQkFBaUIsWUFBWSxDQUFDLFVBQVUsTUFBTSxlQUFlLENBQUM7QUFFdkYsSUFBTSxPQUFPLFNBQVMsY0FBYyxNQUFNO0FBQzFDLElBQU0sU0FBUyxTQUFTLGNBQWMsNEJBQTRCO0FBQ2xFLElBQU0sUUFBUSxRQUFRLGNBQWMsT0FBTztBQUUzQyxJQUFJLE9BQU87QUFDVCw2QkFBMkIsT0FBTztBQUFBLElBQ2hDLE9BQU8sR0FBRztBQUNSLFlBQU0sZ0JBQWdCO0FBQ3RCLGNBQVEsVUFBVSxJQUFJLFFBQVE7QUFBQTtBQUFBLElBRWhDLFFBQVE7QUFBQSxJQUNSLEtBQUssR0FBRztBQUNOLGNBQVEsT0FBTztBQUFBO0FBQUEsRUFFbkIsQ0FBQztBQUNIOyIsCiAgImRlYnVnSWQiOiAiNUM3QkM5RUQ1RThCQjNBODY0NzU2RTIxNjQ3NTZFMjEiLAogICJuYW1lcyI6IFtdCn0=
